---
- name: Provision EC2 instance and install
  hosts: localhost
  gather_facts: no
  vars:
    ansible_python_interpreter: /mnt/d/devops_practise/devops/ansible/venv/bin/python
    ansible_ssh_common_args: -o StrictHostKeyChecking=no
  tasks:
    
    - name: Adding ssh access to a security group
      amazon.aws.ec2_group:
        name: default
        description: security group for Ec2 instance launched via ansible
        region: ap-south-1
        rules:
          - proto: tcp
            from_port: 8080
            to_port: 8080
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
      register: security_group
    
    - name: Launch EC2 instance
      amazon.aws.ec2_instance:
        name: Ansible-created-demo
        key_name: ansible_demo
        region: ap-south-1
        instance_type: t2.micro
        image_id: ami-062f0cc54dbfd8ef1
        count: 1
        security_group: "{{ security_group.group_id }}"
      register: ec2
    
    - name: Wait for instance SSH to become available
      wait_for:
        host: "{{ ec2.instances[0].public_dns_name }}"
        port: 22
        delay: 30
        timeout: 300
        state: started
      when: ec2.instances is defined and ec2.instances | length > 0
    
    - name: Add EC2 instance to dynamic inventory
      add_host:
        name: "{{ ec2.instances[0].public_dns_name }}"
        groups: dynamic_hosts
        ansible_ssh_private_key_file: ~/.ssh/ansible_demo.pem
        ansible_user: ec2-user
        ansible_python_interpreter: /usr/bin/python3
    
    - name: Debug dynamic host group
      debug:
        var: groups['dynamic_hosts']
    
    # - name: Install Apache on EC2 instance
    #   become: yes
    #   yum:
    #    name: httpd
    #    state: present
    #    use_backend: yum
    #   loop: "{{ groups['dynamic_hosts'] }}"
    #   delegate_to: "{{ item }}"
    #   when: groups['dynamic_hosts'] is defined and groups['dynamic_hosts'] | length > 0

    # - name: Start and enable Apache on EC2 instance
    #   become: yes
    #   service:
    #    name: httpd
    #    state: started
    #    enabled: yes
    #   loop: "{{ groups['dynamic_hosts'] }}"
    #   delegate_to: "{{ item }}"
    #   when: groups['dynamic_hosts'] is defined and groups['dynamic_hosts'] | length > 0
